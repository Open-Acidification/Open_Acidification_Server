import math

def point_in_wave(point_x, frequency, amplitude, offset_x, offset_y):
    """Returns the specified point x in the wave of specified parameters."""
    return (math.sin((math.pi * point_x)/frequency + offset_x) * amplitude) + offset_y

def sanitize_ts_type(ts_type):
    # Make type case-insensitive
    ts_type = ts_type.lower()

    # Change type to character code
    if ts_type == 'ph':
        ts_type = 'P'
    elif ts_type in ('temp', 'temperature'):
        ts_type = 'T'
    else:
        ts_type = ''

    return ts_type

def hold_to_time_series(hold_at):
    return {
        'value': [hold_at],
        'time': [0],
        'interval': 0,
        'notes': "Generated by hold function with value "+str(hold_at)
    }

def ramp_to_time_series(start, end, dur):
    return {
        'value': [start, end],
        'time': [0, dur],
        'interval': 0,
        'notes': "Generated by ramp function with start value "+str(start)+ \
                ", end value "+str(end)+", and duration "+str(dur),
    }

def sine_to_time_series(freq, amp, off_x, off_y):
    return {
        'value': [round(point_in_wave((1/10) * i, 1, amp, \
            off_x, off_y), 4) for i in range(0, 20)],
        'time': [freq/10 * i for i in range(0, 20)],
        'interval': freq*2.1,
        'notes': "Generated by sine function with frequency "+str(freq)+ \
            ", amplitude "+str(amp)+", offset_x "+str(off_x)+ \
            ", and offset_y "+str(off_y)
    }
